# T3 Stack Application Guidelines

This is a full-stack Next.js 15.4.1 application using the modern T3 stack with TypeScript, App Router, and production-level best practices.

## Project Structure

The main application is located in the `t3gallery/` directory with the following key files:

- **Entry Point**: [src/app/layout.tsx](mdc:src/app/layout.tsx) - Root layout component
- **Home Page**: [src/app/page.tsx](mdc:src/app/page.tsx) - Main page component
- **Environment Config**: [src/env.js](mdc:src/env.js) - Type-safe environment variables using @t3-oss/env-nextjs
- **Database Schema**: [prisma/schema.prisma](mdc:prisma/schema.prisma) - Prisma ORM schema
- **Package Config**: [package.json](mdc:package.json) - Dependencies and scripts
- **TypeScript Config**: [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration

## Required Technologies & Best Practices

### Core Technologies
- **Next.js 15.4.1** with App Router file-based routing
- **TypeScript** - No use of `any` type allowed
- **React 19** with Server Components (RSCs)
- **Tailwind CSS** for styling
- **Prisma ORM** with PostgreSQL database
- **Zod** for runtime type validation

### Authentication & Security
- **Clerk** for user authentication - users must be able to log in
- **next-safe-action** library for type-safe Server Actions
- **Environment Variables** managed through [src/env.js](mdc:src/env.js) with `.env` and `.env.example` files

### UI & Styling
- **Shadcn UI** as the component library (no customization required)
- **Tailwind CSS** for styling (no custom style system needed)

### Development Tools
- **ESLint** configuration in [eslint.config.js](mdc:eslint.config.js)
- **Prettier** configuration in [prettier.config.js](mdc:prettier.config.js)
- **pnpm** as package manager

## Code Standards

### TypeScript Rules
- Never use the `any` type - always provide proper type definitions
- Use strict TypeScript configuration
- Leverage Zod schemas for runtime validation
- Use the `@t3-oss/env-nextjs` package for type-safe environment variables

### Next.js App Router Patterns
- Use file-based routing in the `src/app/` directory
- Implement Server Components by default
- Use Client Components only when necessary (interactivity, hooks, etc.)
- Leverage Server Actions with next-safe-action for form handling

### Database & ORM
- Use Prisma ORM with PostgreSQL
- Define schemas in [prisma/schema.prisma](mdc:prisma/schema.prisma)
- Use database migrations for schema changes
- Implement proper indexing for performance

### Authentication Flow
- Implement Clerk authentication
- Protect routes and API endpoints
- Handle user sessions properly
- Use Clerk's built-in components for login/signup

### Component Architecture
- Use Shadcn UI components as the foundation
- Follow atomic design principles
- Implement proper error boundaries
- Use proper loading states and error handling

### API & Server Actions
- Use Server Actions with next-safe-action for type safety
- Implement proper error handling and validation
- Use Zod schemas for input validation
- Follow RESTful principles for API design

### Styling Guidelines
- Use Tailwind CSS utility classes
- Follow mobile-first responsive design
- Maintain consistent spacing and typography
- Use Shadcn UI's design system as reference

### Environment & Configuration
- All secrets must be in `.env` file (not committed to git)
- Provide `.env.example` with required variable names
- Use the environment validation in [src/env.js](mdc:src/env.js)
- Document all required environment variables

### Performance & Production
- Implement proper loading states
- Use Next.js Image component for optimized images
- Implement proper caching strategies
- Follow Next.js 15 best practices for performance

### Git & Version Control
- Use meaningful commit messages
- Follow conventional commit format
- Maintain clean git history
- Use proper `.gitignore` patterns

## File Organization

```
src/
├── app/                    # Next.js App Router pages
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page
│   └── (routes)/          # Route groups
├── components/            # Reusable components
│   ├── ui/               # Shadcn UI components
│   └── custom/           # Custom components
├── lib/                  # Utility functions
├── server/               # Server-side utilities
├── styles/               # Global styles
└── env.js                # Environment configuration
```

## Development Commands

- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm lint` - Run ESLint
- `pnpm typecheck` - Run TypeScript checks
- `pnpm db:generate` - Generate Prisma client
- `pnpm db:push` - Push schema to database
- `pnpm db:studio` - Open Prisma Studio

## Not Required
- Analytics implementation
- Sentry error tracking
- Rate limiting
- Custom 404 page (optional)
- Custom styling system

Remember to always prioritize type safety, follow Next.js 15 best practices, and maintain production-level code quality throughout the application.
description:
globs:
alwaysApply: false
---
